package org.csystem.server;

import java.io.Closeable;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import common.Person;

public class Server implements Closeable {
	private ExecutorService m_threadPool;
	
	private void handleClient(Socket clientSocket)
	{		
		try {
			ObjectInputStream ois = new ObjectInputStream(clientSocket.getInputStream());
			ObjectOutputStream oos = new ObjectOutputStream(clientSocket.getOutputStream());
			
			int code = ois.readInt();
			boolean success = true;
			
			if (code == 1) {
				Person p = (Person)ois.readObject();
				
				System.out.println(p);			
			}
			else if (code == 2) {
								
			}
			else 
				success = false;				
			
			oos.writeBoolean(success);	
			
		}
		catch (Exception ex) {
			System.err.println(ex.getMessage());
		}
		finally {
			try {
				clientSocket.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}		
	}
	
	private void acceptAndContinue(ServerSocket socket)
	{
		try {
			Socket clientSocket = socket.accept();
			
			m_threadPool.submit(() -> handleClient(clientSocket));			
		} 
		catch (Exception e) {
			System.err.println(e.getMessage());
		}
	}
	public Server()
	{
		m_threadPool = Executors.newCachedThreadPool();		
	}
	public void run()
	{
		try (ServerSocket socket = new ServerSocket(50500)) {
			System.out.println("Waiting for clients");
			for (;;) 
				this.acceptAndContinue(socket);			
		}
		catch (Exception ex) {
			System.err.println(ex.getMessage());
		}
	}
	
	@Override
	public void close()
	{	
		if (!m_threadPool.isShutdown())
			m_threadPool.shutdown();		
	}
}
